package pattern.prototype.myLearn;

/**
 * 原型模式：用原型实例制定创建对象的种类，并通过拷贝这些原型来创建新的对象。
 * 原型模式主要用于对象的复制，核心类就是类图中的原型类Prototype
 * Prototype类需要满足2个条件：
 * 1.实现Cloneable接口。作用：在运行时告知虚拟机可以安全的在实现了此接口的类上执行clone方法（表示这个Java类支持复制）。
 * 2.重写Object类的clone方法。将clone方法的作用域修改为public的。
 * 优点及适用场景：
 * 1.性能比new方式好很多，因为clone方法是一个本地方法，直接操作内存中的二进制流，大对象尤为明显。
 * 2.简化了对象的创建，逃避构造函数的约束。
 * 综上，在循环体内创建多个对象或者创建过程比较复杂的时候。
 * 一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，
 * 在需要的时候更新数据库，以此来减少数据库调用。
 *
 * 何时使用：
 * 1、当一个系统应该独立于它的产品创建，构成和表示时。
 * 2、当要实例化的类是在运行时刻指定时，例如，通过动态装载。
 * 3、为了避免创建一个与产品类层次平行的工厂类层次时。
 * 4、当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。
 *
 * 使用场景：
 * 1、资源优化场景。
 * 2、类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。
 * 3、性能和安全要求的场景。
 * 4、通过 new 产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。
 * 5、一个对象多个修改者的场景。
 * 6、一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。
 * 7、在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone 的方法创建一个对象，然后由工厂方法提供给调用者。原型模式已经与 Java 融为浑然一体，大家可以随手拿来使用。
 *
 * 注意事项：
 * 1.原型模式复制对象不会调用类的构造方法。对象的复制是调用Object类的clone方法，直接在内存
 *   中复制数据。单例模式与原型模式存在冲突，需要注意。
 * 2.深拷贝还是浅拷贝。Object类的clone方法之后拷贝对象的基本数据类型，
 *   数组，容器对象，引用对象不会拷贝，为浅拷贝，如果要深拷贝，必须将原型
 *   模式中的数组，容器对象，引用对象都拷贝。
 * 相关链接：http://www.runoob.com/design-pattern/prototype-pattern.html
 */
public class Prototype implements Cloneable{

    public Prototype clone(){
        Prototype prototype = null;
        try{
            prototype = (Prototype)super.clone();
        }catch (CloneNotSupportedException e){
            e.printStackTrace();
        }
        return prototype;
    }
}
